generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  type      NotificationType
  link      String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

enum NotificationType {
  UPDATE
  LATEST
}

model Post {
  id          String       @id @default(cuid())
  title       String
  description String
  tags        String
  company     String
  state       State        @relation(fields: [stateId], references: [id])
  views       Int          @default(0)
  private     Boolean      @default(false)
  deleted     Boolean      @default(false)
  keywords    String
  category    CategoryType
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  blogBody    BlogBody?
  stateId     String
}

enum CategoryType {
  ADMIT_CARD
  RESULT
  JOB
  IMPORTANT
  ANSWER_KEY
}

model BlogBody {
  id        String   @id @default(cuid())
  body      String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @unique
}

model State {
  id        String   @id @default(cuid())
  name      String   @unique
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  Post      Post[]
}
